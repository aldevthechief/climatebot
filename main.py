import os
from git import Repo
from server import keep_alive
from time import sleep

import telebot
import requests
import threading
import json
from geopy.geocoders import Nominatim
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton

import datetime
import schedule
from datetime import timedelta, date
from timezonefinder import TimezoneFinder

def run_schedule():
    while True: 
        schedule.run_pending()
        sleep(1)

def run_bot():
    bot_token = os.environ.get('bot_token')
    weather_token = os.environ.get('weather_token')
    
    git_username = os.environ.get('git_username')
    git_token = os.environ.get('git_token')
    
    bot = telebot.TeleBot(bot_token)

    remotelink = f'https://{git_username}:{git_token}@github.com/aldevthechief/climate-bot.git'
    gitdir = os.path.join(os.getcwd(), 'data')

    try:
        repo = Repo(gitdir)
    except:
        repo = Repo.clone_from(remotelink, gitdir, branch='data')

    geodata = dict()
    geodatadir = os.path.join(gitdir, 'geodata.json')
    with open(geodatadir) as file:
        try:
            geodata = json.load(file)
        except json.JSONDecodeError: pass

    # for key in geodata.keys():
    #     bot.send_message(int(key), '–º–æ–π —Ö–æ–∑—è–∏–Ω —Ä–µ—à–∏–ª –º–µ–Ω—è –ø–æ—Ñ–∏–∫—Å–∏—Ç—å, –∑–∞—Ü–µ–Ω–∏ /weather')
        
    scheduleinfo = dict()   
    scheduledir = os.path.join(gitdir, 'scheduleinfo.json')
    with open(scheduledir) as file:
        try:
            scheduleinfo = json.load(file)
        except json.JSONDecodeError: pass
        
        
    weathericons = {'01' : u'\U00002600', 
                    '02' : '‚òÅ', 
                    '03' : '‚õÖ', 
                    '04' : 'üå´', 
                    '09' : u'\U00002614', 
                    '10' : u'\U00002614', 
                    '11' : u'\U0001F4A8',
                    '13' : u'\U00002744'}


    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    locationbutton = types.BotCommand('location', '—Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é')
    weatherbutton = types.BotCommand('weather', '–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å')
    dailyweatherbutton = types.BotCommand('dailyweather', '–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 4 –¥–Ω—è')
    bot.set_my_commands([weatherbutton, locationbutton, dailyweatherbutton])
    
    
    def updategit():
        repo.index.add('geodata.json')
        repo.index.add('scheduleinfo.json')
        repo.index.commit('current user data')
        repo.remote().push()


    @bot.message_handler(commands=['start', 'location'])
    def get_user_location(message):
        chatid = message.chat.id
        bot.clear_step_handler_by_chat_id(chatid)
        
        if message.text == '/start': 
            bot.send_message(chatid, '–ø—Ä–∏–≤–µ—Ç')
        curr_message = bot.send_message(chatid, '–Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É')
        bot.register_next_step_handler(curr_message, send_weather)
        return


    @bot.message_handler(commands=['weather'])
    def weather(message):
        print(schedule.get_jobs(), datetime.datetime.now(), flush=True)
        chatid = message.chat.id
        bot.clear_step_handler_by_chat_id(chatid)
        
        if geodata.get(str(chatid)) is None:
            curr_message = bot.send_message(chatid, '–Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É')
            bot.register_next_step_handler(curr_message, send_weather)
        else: 
            send_weather(message, False)
        return
    
    
    for key, value in scheduleinfo.items():
        refmsg = bot.send_message(int(key), '–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', disable_notification=True)
        zone = TimezoneFinder().timezone_at(lat=scheduleinfo[key][0], lng=scheduleinfo[key][1])
        schedule.every().day.at(value[2], zone).do(weather, refmsg).tag(key)
        bot.delete_message(int(key), refmsg.message_id)


    @bot.message_handler(commands=['dailyweather'])
    def daily_weather(message):
        schedule.run_all()
        chatid = message.chat.id
        bot.clear_step_handler_by_chat_id(chatid)
        
        if geodata.get(str(chatid)) is None:
            curr_message = bot.send_message(chatid, '–Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –¥–Ω—è–º')
            bot.register_next_step_handler(curr_message, choose_daily_weather)
        else: 
            choose_daily_weather(message, False)
        return


    def set_notification(message):
        chatid = message.chat.id
        bot.clear_step_handler_by_chat_id(chatid)
        
        if scheduleinfo.get(str(chatid)) is None:
            replymarkup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            replymarkup.add(KeyboardButton('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç', request_location=True))
            geotext = '–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª —Å–≤–æ–µ –≤—Ä–µ–º—è —Å —Ç–≤–æ–∏–º, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
            geomsg = bot.send_message(chatid, geotext, reply_markup=replymarkup)
            bot.register_next_step_handler(geomsg, get_notification_time)
        else:
            get_notification_time(message, False)


    def get_notification_time(message, gotlocation = True):
        chatid = str(message.chat.id)
        
        timezone = ''
        if gotlocation:
            try:
                timezone = TimezoneFinder().timezone_at(lat=message.location.latitude, lng=message.location.longitude)
                scheduleinfo.pop(chatid, None)
                scheduleinfo[chatid] = [message.location.latitude, message.location.longitude, '']
            except AttributeError:
                bot.send_message(message.chat.id, '–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ', reply_markup=locationnotrecognized_markup())
                return
        else:
            timezone = TimezoneFinder().timezone_at(lat=scheduleinfo[chatid][0], lng=scheduleinfo[chatid][1])
        
        askfortime = '–Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤—Ä–µ–º—è (–≤ 24-—Ö —á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ), –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        timemsg = bot.send_message(message.chat.id, askfortime, reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(timemsg, schedule_notification, timezone)
        

    def schedule_notification(message, timezone):
        msgstr = message.text.replace('-', ':').replace(' ', '')
        
        try:
            scheduledtime = datetime.datetime.strptime(msgstr, '%H:%M').strftime('%H:%M')
        except ValueError:
            bot.send_message(message.chat.id, '–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ', reply_markup=timenotrecognized_markup())
            return
        
        try:
            schedule.clear(str(message.chat.id))
            schedule.every().day.at(scheduledtime, timezone).do(weather, message).tag(str(message.chat.id))
        except: 
            bot.send_message(message.chat.id, '–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ', reply_markup=timenotrecognized_markup())
            return
            
        scheduleinfo[str(message.chat.id)][2] = scheduledtime
        
        confirmmsg = f'–æ—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {scheduledtime} –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏'
        bot.send_message(message.chat.id, confirmmsg, reply_markup=base_keyboard_markup())    
        
        with open(scheduledir, 'w') as file:
            json.dump(scheduleinfo, file)
            
        updategit() 
            
        
    def send_weather(message, getlocation = True):
        if getlocation and message.text in ['/location', '/weather', '/start', '/dailyweather']:
            bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ', reply_markup=no_location_markup())
            return
        
        replymsg = bot.send_message(message.chat.id, '—Å–µ–∫—É–Ω–¥—É, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
        
        if getlocation:
            lat, long = locate_city(message)
            geodata[str(message.chat.id)] = (lat, long)
            
        weatherdata = get_weather(geodata[str(message.chat.id)][0], geodata[str(message.chat.id)][1])
            
        with open(geodatadir, 'w') as file:
            json.dump(geodata, file)
            
        updategit()
            
        iconstr = weatherdata['list'][0]['weather'][0]['icon'][:-1]
        description = '—Å–µ–π—á–∞—Å ' + weatherdata['list'][0]['weather'][0]['description'] + ' ' + weathericons.get(iconstr, ' ') + '\n'
        temperature = '\n' + '–Ω–∞ —É–ª–∏—Ü–µ ' + str(weatherdata['list'][0]['main']['temp']) + '¬∞C,'
        feelslike = '\n' + '–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(weatherdata['list'][0]['main']['feels_like']) + '¬∞C' + '\n'
        precipiation = '\n' + '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ ' + str(int(weatherdata['list'][0]['pop'] * 100)) + '%'
        wind = '\n' + '–≤–µ—Ç–µ—Ä ' + str(round(weatherdata['list'][0]['wind']['speed'])) +' –º/—Å'
        humidity = '\n' + '–≤–ª–∞–∂–Ω–æ—Å—Ç—å ' + str(weatherdata['list'][0]['main']['humidity']) + '%'
        
        showprecipiation = precipiation if weatherdata['list'][0]['pop'] > 0 else ''
        resstring = description +  temperature +  feelslike + wind + showprecipiation + humidity
        
        bot.send_message(message.chat.id, resstring, parse_mode='Markdown', reply_markup=base_keyboard_markup())
        bot.delete_message(message.chat.id, replymsg.message_id)
        
        
    def choose_daily_weather(message, getlocation = True):
        if getlocation:
            if message.text in ['/location', '/weather', '/start', '/dailyweather']:
                bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ', reply_markup=no_location_markup())
                return
            lat, long = locate_city(message)
            geodata[str(message.chat.id)] = (lat, long)
        
        availabledays = ['–ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞'] + ['–ø–æ–≥–æ–¥–∞ ' + (date.today() + timedelta(days=shift)).strftime('%d.%m.%Y') for shift in range(2, 5)]
        bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É:', reply_markup=choose_day_markup(availabledays))
        
        
    def send_daily_weather(message, chosenday):
        replymsg = bot.send_message(message.chat.id, '—Å–µ–∫—É–Ω–¥—É, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
        
        dailyweatherdata = get_weather(geodata[str(message.chat.id)][0], geodata[str(message.chat.id)][1])
            
        with open(geodatadir, 'w') as file:
            json.dump(geodata, file)
            
        updategit()
            
        dailyweatherinfo = fetch_daily_weather(dailyweatherdata['list'])
        
        day, info = list(dailyweatherinfo.items())[int(chosenday.data)]
        date = '\n' + '–ø–æ–≥–æ–¥–∞ –Ω–∞ ' + day + ':' + '\n'
        w_type = '\n' + '–±—É–¥–µ—Ç ' + str(info[0]) + ' ' + weathericons.get(info[1], ' ') + '\n'
        temprange = '\n' + '–æ—Ç ' + str(info[2][0]) + '¬∞C' + ' –¥–æ ' + str(info[2][1]) + '¬∞C' + '\n'
        precipiation = '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ ' + str(int(info[5] * 100)) + '%' + '\n'
        wind = '–≤–µ—Ç–µ—Ä ' + str(info[4]) + ' –º/—Å'
        
        finalstr = date + w_type + temprange + (precipiation if info[5] > 0 else '') + wind
            
        bot.send_message(message.chat.id, finalstr, parse_mode='Markdown', reply_markup=base_keyboard_markup())
        bot.delete_message(message.chat.id, replymsg.message_id)
        bot.delete_message(message.chat.id, chosenday.message.message_id)
        
        
    def fetch_daily_weather(data):
        resinfo = dict()
        
        for i in range(8, len(data), 8):
            daydata = data[i: i + 8]
            
            weather_types = dict()
            
            mintemp, maxtemp = 100, -100
            maxprecip = 0
            
            avgtemp = 0
            avgwind = 0
            divcount = 0
            
            for hourweather in daydata:
                divcount += 1
                avgtemp += hourweather['main']['feels_like']
                avgwind += hourweather['wind']['speed']
                
                mintemp = min(mintemp, hourweather['main']['temp_min'])
                maxtemp = max(maxtemp, hourweather['main']['temp_max'])
                maxprecip = max(maxprecip, hourweather['pop'])
                
                hourdesc = hourweather['weather'][0]['description']
                houricon = hourweather['weather'][0]['icon'][:-1]
                weather_types[hourdesc] = (weather_types.get(hourdesc, (0, houricon))[0] + 1, houricon)
                
            sortedtypes = dict(sorted(weather_types.items(), key=lambda x: x[1][0], reverse=True))
            mainweather = next(iter(sortedtypes))
            mainicon = sortedtypes[mainweather][1]
            
            dayweather = [mainweather, mainicon, (mintemp, maxtemp), round(avgtemp / divcount, 2), round(avgwind / divcount), maxprecip]
            
            formatteddate = datetime.datetime.strptime(daydata[0]['dt_txt'].split()[0], '%Y-%m-%d').strftime('%d.%m.%Y')
            resinfo[formatteddate] = dayweather
            
        return resinfo
            
        
    def locate_city(message):
        place = message.text 
        geocoder = Nominatim(user_agent='my_app')
        
        try:
            locdata = geocoder.geocode(place)
            latitude, longitude = round(locdata.latitude, 5), round(locdata.longitude, 5)
            return latitude, longitude
        except AttributeError:
            bot.send_message(message.chat.id, '–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ', reply_markup=no_location_markup())
            return
    
            
    def get_weather(latitude, longitude):
        api = 'https://api.openweathermap.org/data/2.5/forecast?lat={}&lon={}&appid={}'.format(latitude, longitude, weather_token)
        response = requests.get(api, params={'units': 'metric', 'lang': 'ru'})
        return response.json()


    def clear_notification(msg):
        chatid = msg.chat.id
        
        if str(chatid) not in scheduleinfo: 
            bot.edit_message_text('—Ç—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', chatid, msg.message_id, reply_markup=base_keyboard_markup())
            return
        
        scheduleinfo.pop(str(chatid), None)
        schedule.clear(str(chatid))
        bot.edit_message_text('—Ç–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ', chatid, msg.message_id, reply_markup=base_keyboard_markup())
        
        with open(scheduledir, 'w') as file:
            json.dump(scheduleinfo, file)
            
        updategit() 


    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):
        msg = call.message
        bot.edit_message_reply_markup(msg.chat.id, msg.message_id, '')
        
        if call.data == 'new_weather': weather(msg)
        elif call.data == 'new_location': get_user_location(msg)
        elif call.data == 'new_daily_weather': daily_weather(msg)
        elif call.data == 'new_setup_notification': 
            schtime = scheduleinfo.get(str(msg.chat.id), '   ')[2]
            choosestring = '–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å\n' + (f'\n–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –≤ {schtime}' if schtime != ' ' else '')
            bot.send_message(msg.chat.id, choosestring, reply_markup=setup_notifs_markup())
        elif call.data == 'new_create_notification': 
            set_notification(msg)
            bot.delete_message(msg.chat.id, msg.message_id)
        elif call.data == 'new_delete_notification': clear_notification(msg)
        elif call.data == 'new_time' : set_notification(msg)
        elif call.data.isdigit(): send_daily_weather(msg, call)
            
            
    def base_keyboard_markup():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(InlineKeyboardButton('–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', callback_data='new_weather'), 
                InlineKeyboardButton('—Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='new_location'),
                InlineKeyboardButton('–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 4 –¥–Ω—è', callback_data='new_daily_weather'))
        markup.add(InlineKeyboardButton('–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ', callback_data='new_setup_notification'))
        return markup


    def choose_day_markup(daystochoose, buttonstodel = []):
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(*[InlineKeyboardButton(daystochoose[i], callback_data=str(i)) for i in range(len(daystochoose)) if i not in buttonstodel])
        return markup


    def no_location_markup():
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('—Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='new_location'))
        return markup


    def timenotrecognized_markup():
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è', callback_data='new_time'))
        return markup
    
    
    def locationnotrecognized_markup():
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ', callback_data='new_create_notification'))
        return markup


    def setup_notifs_markup():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton('–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', callback_data='new_create_notification'), 
                   InlineKeyboardButton('–æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', callback_data='new_delete_notification'))
        return markup


    while True: 
        keep_alive()
        try:
            bot.infinity_polling()
        except Exception as _ex:
            print(_ex)
            sleep(15)
            
            
if __name__ == '__main__':
    t1 = threading.Thread(target=run_bot)
    t2 = threading.Thread(target=run_schedule)
    t2.start()
    t1.start()
